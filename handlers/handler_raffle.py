import asyncio
import time

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, or_f

from config_data.config import Config, load_config
from module.data_base import get_message_content, create_table_list_raffle, add_user_list_raffle, get_info_user,\
    set_done_task, get_list_last_raffle, get_list_user, get_info_user_raffle, get_last_date_raffle
from keyboards.keyboard_raffle import keyboard_task, keyboard_new_raffle
import requests
import logging
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.fsm.context import FSMContext
import random
from aiogram.fsm.state import State, StatesGroup, default_state

router = Router()
user_dict = {}
config: Config = load_config()


class User(StatesGroup):
    username = State()
# TEST_WEEK_DAY = 0
# TEST_LIST_TIME = []
# for i in range(7):
#     minute = check_day = datetime.now().minute - 4 + i * 2
#     TEST_LIST_TIME.append(minute)
# # scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
# # scheduler.start()
# print(TEST_LIST_TIME)


def get_telegram_user(user_id, bot_token):
    url = f'https://api.telegram.org/bot{bot_token}/getChat'
    data = {'chat_id': user_id}
    response = requests.post(url, data=data)
    return response.json()


@router.callback_query(F.data == 'confirm_username')
async def task_monday(callback: CallbackQuery, num_task: int = 0) -> None:
    logging.info(f'task_monday: {callback.message.chat.id}')

    # –ø–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    week_day = datetime.today().weekday()
    # !!!!! –ø–æ–ª—É—á–∞–µ–º —á–∞—Å
    # week_day = datetime.now().minute // 10
    # –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    if week_day == num_task:
        # —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
        create_table_list_raffle()
        # –¥–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –±–ª–∏–∂–∞–π—à—É—é —Å—É–±–±–æ—Ç—É
        current_date = datetime.now() + timedelta(days=5)
        date_raffle = current_date.strftime('%d/%m/%Y')
        # !!!!! –¥–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        # date_raffle = datetime.now().strftime('%H/%d/%m/%Y')
        # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        add_user_list_raffle(date_raffle=date_raffle,
                             id_telegram=callback.message.chat.id,
                             count_task=0)

        # –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
        message_content = get_message_content(id_message=num_task+1)
        if '\\n' in message_content[2]:
            text = message_content[2].replace('\\n', '\n')
        else:
            text = message_content[2]
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
        if message_content[3] == 'none':
            await callback.message.answer(text=text,
                                          reply_markup=keyboard_task(num_task=num_task),
                                          parse_mode='html')
        else:
            await callback.message.answer_photo(photo=message_content[3],
                                                caption=text,
                                                reply_markup=keyboard_task(num_task=num_task),
                                                parse_mode='html')

        # !!! –ü–ï–†–í–û–ï –î–û–°–´–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        await asyncio.sleep(1 * 60 * 60)
        # await asyncio.sleep(1 * 60 * 2)
        list_task_name = ['–ø–µ—Ä–≤–æ–µ', '–≤—Ç–æ—Ä–æ–µ', '—Ç—Ä–µ—Ç—å–µ', '—á–µ—Ç–≤–µ—Ä—Ç–æ–µ', '–ø—è—Ç–æ–µ']
        # –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏
        info_user_raffle = get_info_user_raffle(id_telegram=callback.message.chat.id,
                                                date_raffle=date_raffle)
        if info_user_raffle[3] == num_task and week_day == num_task:
        # if info_user_raffle[3] == num_task and datetime.now().minute // 10 == week_day:
            await callback.message.answer(text=f'–í—ã—à–µ –º—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Ç–µ–±–µ {list_task_name[0]} –∑–∞–¥–∞–Ω–∏–µ!\n'
                                               f'–û–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ?\n\n'
                                               f'–ï—Å–ª–∏ –Ω–µ—Ç - —Å–∫–æ—Ä–µ–µ –≤—ã–ø–æ–ª–Ω—è–π –∏ –Ω–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç,'
                                               f' –∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" –Ω–∏–∂–µ.',
                                          reply_markup=keyboard_task(num_task=num_task))
            await asyncio.sleep(3 * 60 * 60)
            # await asyncio.sleep(60 * 5)
            info_user_raffle = get_info_user_raffle(id_telegram=callback.message.chat.id, date_raffle=date_raffle)
            if info_user_raffle[3] == num_task and week_day == num_task:
            # if info_user_raffle[3] == num_task and datetime.now().minute // 10 == week_day:
                await callback.message.answer(text=f'–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å {list_task_name[0]} –∑–∞–¥–∞–Ω–∏–µ.'
                                                   f' –ë–æ–ª—å—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–µ –±—É–¥–µ–º!\n\n'
                                                   f'–°–∫–æ—Ä–µ–µ –≤—ã–ø–æ–ª–Ω—è–π! –ù–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –∞ –ø–æ—Å–ª–µ'
                                                   f' –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" –Ω–∏–∂–µ.',
                                              reply_markup=keyboard_task(num_task=num_task))

    else:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        await callback.message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ–∂–¥–∏—Å—å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π –∫ –∑–∞–¥–∞–Ω–∏—è–º üë®‚Äçüíª. '
                                           '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º,  —á—Ç–æ –Ω–∞ –∫–æ–Ω—É 5.000 —Ä—É–±–ª–µ–π!')
        create_table_list_raffle()
        # !!!! –¥–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        week_day = datetime.today().weekday()
        # week_day = datetime.now().hour
        # week_day = datetime.now().minute // 10
        list_plus_date_raffle = [5, 4, 3, 2, 1, 7, 6]
        # !!!!! –¥–∞—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        # if week_day != 0:
        #     hours = 1
        # else:
        #     hours = 0
        # date_raffle = (datetime.now() + timedelta(hours=hours)).strftime('%H/%d/%m/%Y')
        date_raffle = (datetime.now() + timedelta(days=list_plus_date_raffle[week_day])).strftime('%d/%m/%Y')
        # await state.update_data(date_raffle=date_raffle)
        # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        add_user_list_raffle(date_raffle=date_raffle,
                             id_telegram=callback.message.chat.id,
                             count_task=0)
    await callback.answer()


@router.callback_query(F.data == 'decline_task')
async def confirm_decline_task(callback: CallbackQuery, state: FSMContext) -> None:
    logging.info(f'confirm_decline_task: {callback.message.chat.id}')
    # user_dict[callback.message.chat.id] = await state.get_data()
    # date_raffle = user_dict[callback.message.chat.id]['date_raffle']
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    date_raffle = get_last_date_raffle()
    set_done_task(id_telegram=callback.message.chat.id, date_raffle=date_raffle, done_task=-1)
    # await state.update_data(done_task=-1)
    # scheduler.remove_all_jobs()
    await callback.message.answer(text=f'–ù–µ –∑–Ω–∞–µ–º –ø–æ—á–µ–º—É —Ç—ã —Ä–µ—à–∏–ª(–∞) –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è, –Ω–æ —É–≤–∞–∂–∞–µ–º —Ç–≤–æ√´ —Ä–µ—à–µ–Ω–∏–µ.'
                                       f' –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –Ω–∞–∂–º–∏ /start')
    await callback.answer()


@router.callback_query(F.data.startswith('done_task'))
async def confirm_done_task(callback: CallbackQuery, bot: Bot) -> None:
    logging.info(f'confirm_done_task: {callback.message.chat.id} - {datetime.now().minute}')
    num_task = int(callback.data.split('_')[2])
    if num_task == datetime.today().weekday():
        text_done_task = ['–ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ ‚úÖ\n\n–ñ–¥–∏ –∑–∞–≤—Ç—Ä–∞ –≤—Ç–æ—Ä–æ–µ!',
                          '–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –£–∂–µ –¥–≤–∞ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –ø—è—Ç–∏ —Å–¥–µ–ª–∞–Ω–æ‚úÖ',
                          '‚úÖ–¢—ã —Ç–∞–∫ –ª–µ–≥–∫–æ –≤—ã–ø–æ–ª–Ω–∏–ª –∏ —Ç—Ä–µ—Ç—å–µ –∑–∞–¥–∞–Ω–∏–µ!\n\n–ó–∞–≤—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –µ—â–µ –æ–¥–Ω–æ.',
                          '‚úÖ –ö—Ä—É—Ç–æ! –¢—ã –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ —Ç—ã –≤ —à–∞–≥–µ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ 5 –Ω–∞—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π –∏ —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞?!\n\n–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ. –ñ–¥–∏ –µ–≥–æ –∑–∞–≤—Ç—Ä–∞!',
                          '‚úÖ –û–≥–æ–Ω—å! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è!\n\n–ò —Ç–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥—ë—Ç –≤ —Å—É–±–±–æ—Ç—É!']
        await callback.message.answer(text=text_done_task[num_task])
        # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ä–æ–∑—ã–≥—Ä—ã—à—É
        date_raffle = get_last_date_raffle()
        set_done_task(id_telegram=callback.message.chat.id, date_raffle=date_raffle, done_task=num_task+1)
    else:
        list_task_name = ['–ø–µ—Ä–≤–æ–µ', '–≤—Ç–æ—Ä–æ–µ', '—Ç—Ä–µ—Ç—å–µ', '—á–µ—Ç–≤–µ—Ä—Ç–æ–µ', '–ø—è—Ç–æ–µ']
        await callback.message.answer(text=f'–°–æ–∂–∞–ª–µ–µ–º, –Ω–æ —Ç—ã –Ω–µ —É—Å–ø–µ–ª –≤—ã–ø–æ–ª–Ω–∏—Ç—å {list_task_name[num_task]} –∑–∞–¥–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è! –ò –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–æ—Ä—å–±—É –∑–∞ –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑.\n\n'
                                           f'–ù–æ –º—ã –Ω–∞–ø–æ–º–Ω–∏–º —Ç–µ–±–µ –æ –Ω–æ–≤–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫.')
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    await callback.answer()


async def get_task_monday(num_task: int, bot: Bot):
    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö num_task –∑–∞–¥–∞–Ω–∏–π
    list_raffle = get_list_last_raffle(done_task=num_task)
    # –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
    message_content = get_message_content(id_message=num_task + 1)
    text = message_content[2]
    if '\\n' in message_content[2]:
        text = message_content[2].replace('\\n', '\n')
    # –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if message_content[3] == 'none':
        for user_raffle in list_raffle:
            if user_raffle[3] != -1 or user_raffle[3] == num_task:
                result = get_telegram_user(user_id=user_raffle[2], bot_token=config.tg_bot.token)
                if 'result' in result:
                    await asyncio.sleep(0.1)
                    try:
                        await bot.send_message(chat_id=user_raffle[2],
                                               text=text,
                                               reply_markup=keyboard_task(num_task=num_task),
                                               parse_mode='html')
                    except:
                        pass
    else:
        for user_raffle in list_raffle:
            print(238, user_raffle)
            if user_raffle[3] != -1 or user_raffle[3] == num_task:
                result = get_telegram_user(user_id=user_raffle[2], bot_token=config.tg_bot.token)
                if 'result' in result:
                    await asyncio.sleep(0.1)
                    try:
                        await bot.send_photo(chat_id=user_raffle[2],
                                             photo=message_content[3],
                                             caption=text,
                                             reply_markup=keyboard_task(num_task=num_task),
                                             parse_mode='html')
                    except:
                        pass

    # !!! –ü–ï–†–í–û–ï –î–û–°–´–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
    await asyncio.sleep(1 * 60 * 60)
    # await asyncio.sleep(1 * 60 * 2)
    list_task_name = ['–ø–µ—Ä–≤–æ–µ', '–≤—Ç–æ—Ä–æ–µ', '—Ç—Ä–µ—Ç—å–µ', '—á–µ—Ç–≤–µ—Ä—Ç–æ–µ', '–ø—è—Ç–æ–µ']
    # –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏
    # check_day = datetime.now().minute
    list_raffle = get_list_last_raffle(done_task=num_task)
    # print('214', num_task, list_raffle)
    for user_raffle in list_raffle:
        # if (user_raffle[3] != -1 or user_raffle[3] == num_task) and (TEST_LIST_TIME[num_task + 2] <= check_day < TEST_LIST_TIME[num_task + 3]):  # datetime.today().weekday() == TEST_WEEK_DAY:#check_day:
        if (user_raffle[3] != -1 or user_raffle[3] == num_task) and datetime.today().weekday() == num_task:
        # if (user_raffle[3] != -1 or user_raffle[3] == num_task) and datetime.now().minute // 10 == num_task:
            print(260, user_raffle)
            result = get_telegram_user(user_id=user_raffle[2], bot_token=config.tg_bot.token)
            if 'result' in result:
                await bot.send_message(chat_id=user_raffle[2],
                                       text=f'–í—ã—à–µ –º—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Ç–µ–±–µ {list_task_name[user_raffle[3]]} –∑–∞–¥–∞–Ω–∏–µ!\n'
                                            f'–û–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ?\n\n'
                                            f'–ï—Å–ª–∏ –Ω–µ—Ç - —Å–∫–æ—Ä–µ–µ –≤—ã–ø–æ–ª–Ω—è–π –∏ –Ω–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç,'
                                            f' –∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" –Ω–∏–∂–µ.',
                                       reply_markup=keyboard_task(num_task=num_task))
            await asyncio.sleep(3 * 60 * 60)
            # await asyncio.sleep(1 * 60 * 5)
            list_raffle = get_list_last_raffle(done_task=num_task)
            for user_raffle in list_raffle:
                if (user_raffle[3] != -1 or user_raffle[3] == num_task) and datetime.today().weekday() == num_task:
                # if (user_raffle[3] != -1 or user_raffle[3] == num_task) and datetime.now().minute // 10 == num_task:
                # if (user_raffle[3] != -1 or user_raffle[3] == num_task) and (TEST_LIST_TIME[num_task + 2] <= check_day < TEST_LIST_TIME[num_task + 3]):
                    print(276, user_raffle)
                    result = get_telegram_user(user_id=user_raffle[2], bot_token=config.tg_bot.token)
                    if 'result' in result:
                        await bot.send_message(chat_id=user_raffle[2],
                                               text=f'–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å {list_task_name[user_raffle[3]]} –∑–∞–¥–∞–Ω–∏–µ.'
                                                    f' –ë–æ–ª—å—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–µ –±—É–¥–µ–º!\n\n'
                                                    f'–°–∫–æ—Ä–µ–µ –≤—ã–ø–æ–ª–Ω—è–π! –ù–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –∞ –ø–æ—Å–ª–µ'
                                                    f' –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" –Ω–∏–∂–µ.',
                                               reply_markup=keyboard_task(num_task=num_task))


async def select_winer(bot: Bot):
    list_raffle = get_list_last_raffle(done_task=5)
    if len(list_raffle) >= 5:
        list_winer = random.choice(list_raffle, 5)
    else:
        list_winer = list_raffle
    text = ''
    for winer in list_winer:
        infor_user = get_info_user(telegram_id=winer[2])
        text += f'{infor_user[2]}\n'
        result = get_telegram_user(user_id=winer[2], bot_token=config.tg_bot.token)
        if 'result' in result:
            await bot.send_message(chat_id=winer[2],
                                   text='–í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞,'
                                        ' –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É @ksxbulkin –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π')
    list_user = get_list_user()
    for user in list_user:
        result = get_telegram_user(user_id=user[1], bot_token=config.tg_bot.token)
        if 'result' in result:
            await bot.send_message(chat_id=user[1],
                                   text=f'–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏:\n'
                                        f'{text}')


async def send_new_raffle(bot: Bot):
    list_user = get_list_user()
    for user in list_user:
        result = get_telegram_user(user_id=user[1], bot_token=config.tg_bot.token)
        if 'result' in result:
            await bot.send_message(chat_id=user[1],
                                   text=f'–° –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–∏!\n'
                                        f'–ê –∑–Ω–∞—á–∏—Ç —É –Ω–∞—Å —Å—Ç–∞—Ä—Ç—É—é—Ç –Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —ç—Ç–æ —Ç–≤–æ–π –Ω–æ–≤—ã–π —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å'
                                        f' 5.000 —Ä—É–±.',
                                   reply_markup=keyboard_new_raffle())


@router.callback_query(F.data == 'raffle_new')
async def confirm_new_raffle(callback: CallbackQuery) -> None:
    logging.info(f'confirm_new_raffle: {callback.message.chat.id}')
    await task_monday(callback=callback, num_task=0)
    await callback.answer()


@router.callback_query(F.data == 'decline_raffle_new')
async def confirm_decline_raffle_new(callback: CallbackQuery) -> None:
    logging.info(f'confirm_decline_raffle_new: {callback.message.chat.id}')
    await callback.message.answer(text=f'–ù–µ –∑–Ω–∞–µ–º –ø–æ—á–µ–º—É —Ç—ã —Ä–µ—à–∏–ª(–∞) –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è, –Ω–æ —É–≤–∞–∂–∞–µ–º —Ç–≤–æ√´ —Ä–µ—à–µ–Ω–∏–µ.'
                                       f' –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –Ω–∞–∂–º–∏ /start')
    await callback.answer()